version: '3.8'

services:

  nginx:
    image: nginx:alpine
    container_name: feedback_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - fastapi
    restart: unless-stopped

  postgres:
    image: postgres:15
    container_name: feedback_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    # Only for dev
    # ports:
    #   - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI App
  fastapi:
    build: ./feedback-app
    container_name: feedback_app
    # Only for dev - service is nginx exposed
    # ports:
    #   - "8000:8000"
    environment:
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./feedback-app:/app
    restart: unless-stopped
    env_file:
      - .env

  # Feedback Reader App
  feedback-reader:
    build: ./feedback-reader
    container_name: feedback_reader_app
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      ASANA_API_TOKEN: ${ASANA_API_TOKEN}
      ASANA_PROJECT_ID: ${ASANA_PROJECT_ID}
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env

  # Cron service for feedback reader
  feedback-cron:
    image: alpine:latest
    container_name: feedback_cron
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - .:/workspace:ro
      - /var/log:/var/log
    working_dir: /workspace
    command: >
      sh -c "
        apk add --no-cache docker &&
        echo '0 0 * * * docker start feedback_reader_app' > /etc/crontabs/root &&
        echo 'Cron job installed. Running crond...' &&
        crond -f -l 2
      "
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data: